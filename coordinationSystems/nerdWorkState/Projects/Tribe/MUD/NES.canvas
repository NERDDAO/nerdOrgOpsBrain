{
	"nodes":[
		{"id":"f4f08001aa1a058f","type":"group","x":-2383,"y":-3787,"width":4596,"height":3693,"label":"Untitled group"},
		{"id":"7c37b3699de05511","type":"text","text":"Sure, let's create a system to manage the new `Item` and `Inventory` tables. This system will allow us to add items, update the inventory, and manage item counts.\n\nWe'll begin by importing the necessary modules and defining the new system contract called `InventorySystem`. This system will have the following features:\n\n1. Adding new items to the system.\n2. Adding items to a player's inventory.\n3. Updating the item count in the inventory.\n\nHere is the system contract:\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport { System } from \"@latticexyz/world/src/System.sol\";\nimport { Item, ItemData, Inventory, InventoryData, Player } from \"../codegen/index.sol\";\nimport { addressToEntityKey } from \"../addressToEntityKey.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\ncontract InventorySystem is System {\n  using EnumerableSet for EnumerableSet.UintSet;\n  \n  function addItem(string calldata name, string calldata description) public returns (bytes32) {\n    // Generate a unique itemId\n    bytes32 itemId = keccak256(abi.encodePacked(name, block.timestamp));\n\n    // Ensure the item does not already exist\n    require(Item.exists(itemId) == false, \"Item already exists\");\n\n    // Create the item\n    Item.set(itemId, ItemData({ itemId: itemId, name: name, description: description }));\n\n    return itemId;\n  }\n\n  function addItemToInventory(bytes32 playerId, bytes32 itemId, uint256 count) public {\n    // Ensure the player and item exist\n    require(Player.exists(playerId), \"Player does not exist\");\n    require(Item.exists(itemId), \"Item does not exist\");\n\n    // Get the current inventory\n    InventoryData memory inventory = Inventory.get(playerId);\n\n    // Update the item count or add a new item\n    bool itemFound = false;\n    for (uint256 i = 0; i < inventory.items.length; i++) {\n      if (inventory.items[i].itemId == itemId) {\n        inventory.items[i].count += count;\n        itemFound = true;\n        break;\n      }\n    }\n\n    if (!itemFound) {\n      // Add the new item to the inventory\n      inventory.items.push(ItemInfo({ itemId: itemId, count: count }));\n    }\n\n    // Set the updated inventory\n    Inventory.set(playerId, inventory);\n  }\n\n  function updateItemCount(bytes32 playerId, bytes32 itemId, uint256 newCount) public {\n    // Ensure the player and item exist\n    require(Player.exists(playerId), \"Player does not exist\");\n    require(Item.exists(itemId), \"Item does not exist\");\n\n    // Get the current inventory\n    InventoryData memory inventory = Inventory.get(playerId);\n\n    // Update the item count\n    for (uint256 i = 0; i < inventory.items.length; i++) {\n      if (inventory.items[i].itemId == itemId) {\n        inventory.items[i].count = newCount;\n        Inventory.set(playerId, inventory);\n        return;\n      }\n    }\n\n    // Item not found in inventory\n    revert(\"Item not found in inventory\");\n  }\n}\n```\n\n### Explanation\n\n1. **`addItem` function:**\n    - Generates a unique itemId based on the item name and current timestamp using `keccak256`.\n    - Ensures the item does not already exist by checking its existence.\n    - Adds the new item to the `Item` table.\n    - Returns the generated `itemId`.\n\n2. **`addItemToInventory` function:**\n    - Ensures the player and item exist, checking their existence.\n    - Gets the current inventory for the player.\n    - Checks if the item already exists in the player's inventory and updates the count if found.\n    - If the item is not found, it adds a new item entry to the inventory.\n    - Sets the updated inventory data.\n\n3. **`updateItemCount` function:**\n    - Ensures the player and item exist by checking their existence.\n    - Gets the current inventory for the player.\n    - Updates the item count in the player's inventory.\n    - Sets the updated inventory data.\n    - If the item is not found, it reverts with an appropriate message.\n\nThis `InventorySystem` contract will help you manage items and inventories within your game, ensuring consistency and enforcing necessary checks. This contract can be extended to include more functionality as required.","x":-1180,"y":-1920,"width":1000,"height":1620,"color":"6"},
		{"id":"e11bcdc07f025169","type":"text","text":"# Tables\n\n`World` uses the [store tables](/store/tables), but adds [access control](/world/namespaces-access-control). For onchain tables, the data is stored by the `World` contract, [which is also a `StoreData` (opens in a new tab)](https://github.com/latticexyz/mud/blob/main/packages/world/src/World.sol#L43).\n\nWhen a `System` reads or writes storage via [table libraries](/store/table-libraries), the request goes into [`StoreSwitch` (opens in a new tab)](https://github.com/latticexyz/mud/blob/main/packages/store/src/StoreSwitch.sol). This library decides which approach to use:\n\n- If the `System` is in the root namespace, then it was called with [`delegatecall` (opens in a new tab)](https://docs.soliditylang.org/en/v0.8.22/introduction-to-smart-contracts.html#delegatecall-and-libraries). This means it inherits the `World` storage and can write directly to storage using [`StoreCore` (opens in a new tab)](https://github.com/latticexyz/mud/blob/main/packages/store/src/StoreCore.sol). These calls bypass access control.\n    \n- If the `System` is in any other namespace, then it was called with [`call` (opens in a new tab)](https://docs.soliditylang.org/en/v0.8.22/introduction-to-smart-contracts.html#message-calls) and has to call back into the `World` using [`IStore` (opens in a new tab)](https://github.com/latticexyz/mud/blob/main/packages/store/src/IStore.sol). These calls go through access control. They are only permitted if the `System` has access to the table in question. By default a `System` has access to its own namespace and therefore to all the tables inside it. Additional [access can be granted](/world/namespaces-access-control) by the namespace owner.\n    \n\n![Interaction between the World, a System, and a table](https://mud.dev/world/tables/_next/static/media/world-table.39df342f.svg)\n\n1. An account calls a function called `game__myFunc` on the `World`. [This function was registered](/world/function-selectors) by the owner of the `game` namespace and points to the `myFunc` function in one of the `System`s in the `namespace` namespace.\n    \n2. The `World` verifies that access is permitted (for example, because `game:System` is publicly accessible) and if so calls `myFunc` on the `game:System` contract with the provided parameters.\n    \n3. At some point in its execution `myFunc` decides to update the data in the table `game:Items`. As with all other tables, this table is stored in the `World`'s storage. To modify it, `function` calls a function on the `World` contract.\n    \n4. The `World` verifies that access is permitted (by default it would be, because `game:System` has access to the `game` namespace). If so, it modifies the data in the `game:Items` table.\n    \n\n⚠️\n\nOnce a table is created its schema is _immutable_. If you need to add fields to an existing table, create a new table with the same key schema and the new fields in the value schema, and retrieve from both tables to get the complete value. If you need to delete fields, just have your code ignore them.\n\n## Code samples[](#code-samples)\n\n### Reading from a table[](#reading-from-a-table)\n\nAnybody connected to the blockchain can run the `view` functions that read table content, provided they know which key to use (by default MUD does not keep a list of keys written to a table onchain, to save on storage operations).\n\nAll the functions to [read from a MUD store](/store/table-libraries#reading-data) are available. In this example we use the `Counter` table in the [vanilla](/templates/typescript/vanilla) template, which is a singleton so there is no key to worry about.\n\nReadCounter.s.sol\n\n```\n// SPDX-License-Identifier: MIT\npragma solidity >=0.8.24;\n \nimport { Script } from \"forge-std/Script.sol\";\nimport { console } from \"forge-std/console.sol\";\nimport { StoreSwitch } from \"@latticexyz/store/src/StoreSwitch.sol\";\nimport { Counter } from \"../src/codegen/index.sol\";\n \ncontract ReadCounter is Script {\n  function run() external {\n    address worldAddress = 0xC14fBdb7808D9e2a37c1a45b635C8C3fF64a1cc1;\n    StoreSwitch.setStoreAddress(worldAddress);\n    console.log(\"Counter value:\", Counter.get());\n  }\n}\n```\n\nExplanation\n\n```\nimport { StoreSwitch } from \"@latticexyz/store/src/StoreSwitch.sol\";\n```\n\nWe need [the `StoreSwitch` library (opens in a new tab)](https://github.com/latticexyz/mud/blob/main/packages/store/src/StoreSwitch.sol) library to specify the address of the `World` with the data.\n\n```\nimport { Counter } from \"../src/codegen/index.sol\";\n```\n\nIt is easiest if we import the definitions of the table that were generated using [`mud tablegen`](/cli/tablegen).\n\n```\n    address worldAddress = 0xC14fBdb7808D9e2a37c1a45b635C8C3fF64a1cc1;\n    StoreSwitch.setStoreAddress(worldAddress);\n```\n\nUse [`StoreSwitch` (opens in a new tab)](https://github.com/latticexyz/mud/blob/main/packages/store/src/StoreSwitch.sol) with the `World` address.\n\n```\n    console.log(\"Counter value:\", Counter.get());\n```\n\nRead the information. If this had been a table with a key, we'd need to provide the key as a parameter to `<table name>.get()`.\n\n### Writing to table[](#writing-to-table)\n\nAll the functions to [write to a MUD store](/store/table-libraries#writing-data) are available. In this example we reset `Counter` to zero. Note that only [authorized addresses](/world/namespaces-access-control#access) are allowed to write directly to a table.\n\nResetCounter.s.sol\n\n```\n// SPDX-License-Identifier: MIT\npragma solidity >=0.8.24;\n \nimport { Script } from \"forge-std/Script.sol\";\nimport { console } from \"forge-std/console.sol\";\nimport { StoreSwitch } from \"@latticexyz/store/src/StoreSwitch.sol\";\nimport { Counter } from \"../src/codegen/index.sol\";\n \ncontract ResetCounter is Script {\n  function run() external {\n    // Specify a store so that you can use tables directly\n    address worldAddress = 0xC14fBdb7808D9e2a37c1a45b635C8C3fF64a1cc1;\n    StoreSwitch.setStoreAddress(worldAddress);\n \n    // Load the private key from the `PRIVATE_KEY` environment variable (in .env)\n    uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n \n    // Start broadcasting transactions from the deployer account\n    vm.startBroadcast(deployerPrivateKey);\n    Counter.set(0);\n    vm.stopBroadcast();\n \n    console.log(\"Counter value:\", Counter.get());\n  }\n}\n```\n\nExplanation\n\n```\n    Counter.set(0);\n```\n\nThis is how you modify a table's value. If there was a key, it would be `<table name>.set(<key fields>,<value fields>)`.\n","x":-2363,"y":-3603,"width":617,"height":799},
		{"id":"c8404f4f0c4c7b94","type":"text","text":"```ts\nimport { defineWorld } from \"@latticexyz/world\";\n\n// Define enums for better type safety and readability\nconst EntityType = [\"Player\"];\n\nexport default defineWorld({\n  enums: {\n    EntityType,\n  },\n  tables: {\n    Player: {\n      schema: {\n        id: \"bytes32\",\n        x: \"int32\",\n        y: \"int32\",\n        health: \"uint32\",\n        name: \"string\",\n      },\n      key: [\"id\"],\n    },\n    Lore: {\n      schema: {\n        id: \"bytes32\",\n        alignment: \"string\",\n        backstory: \"string\",\n        currentQuest: \"string\",\n      },\n      key: [\"id\"],\n    },\n  },\n  deploy: {\n    upgradeableWorldImplementation: true,\n  },\n});\n\n```","x":-1694,"y":-3687,"width":834,"height":807},
		{"id":"d903cfb737213afe","type":"text","text":"\n\n# Systems\n\nOne of the design principles of MUD is to separate the state of the `World` from the business logic. The business logic is implemented in stateless `System` contracts. `System`s are called through the `World`, and call back to the `World` to read and write state from [tables](/world/tables).\n\nDetailed illustration\n\n![Interaction between the World, a System, and a table](https://mud.dev/world/systems/_next/static/media/world-table.39df342f.svg)\n\n1. An account calls a function called `game__myFunc` on the `World`. [This function was registered](/world/function-selectors) by the owner of the `game` namespace and points to the `myFunc` function in one of the `System`s in the `namespace` namespace.\n    \n2. The `World` verifies that access is permitted (for example, because `game:System` is publicly accessible) and if so calls `myFunc` on the `game:System` contract with the provided parameters.\n    \n3. At some point in its execution `myFunc` decides to update the data in the table `game:Items`. As with all other tables, this table is stored in the `World`'s storage. To modify it, `function` calls a function on the `World` contract.\n    \n4. The `World` verifies that access is permitted (by default it would be, because `game:System` has access to the `game` namespace). If so, it modifies the data in the `game:Items` table.\n    \n\nThe `World` serves as a central entry point and forwards calls to systems, which allows it to provide [access control](/world/namespaces-access-control).\n\n## Calling systems[](#calling-systems)\n\nTo call a `System`, you call the `World` in one of these ways:\n\n- If a [function selector for the `System` is registered in the `World`](/world/function-selectors), you can call it via `world.<namespace>__<function>(<arguments>)`.\n- You can use [`call` (opens in a new tab)](https://github.com/latticexyz/mud/blob/main/packages/world/src/World.sol#L333-L345).\n- If you have [the proper delegation](/world/account-delegation) you can use [`callFrom` (opens in a new tab)](https://github.com/latticexyz/mud/blob/main/packages/world/src/World.sol#L347-L388).\n\n### Using `call`[](#using-call)\n\nTo use `call` you create the calldata to send the called `System` and use that as a parameter.\n\nCall.s.sol\n\n```\n// SPDX-License-Identifier: MIT\npragma solidity >=0.8.24;\n \nimport { Script } from \"forge-std/Script.sol\";\nimport { console } from \"forge-std/console.sol\";\nimport { StoreSwitch } from \"@latticexyz/store/src/StoreSwitch.sol\";\n \nimport { IWorld } from \"../src/codegen/world/IWorld.sol\";\nimport { Tasks, TasksData } from \"../src/codegen/index.sol\";\n \nimport { ResourceId, WorldResourceIdLib, WorldResourceIdInstance } from \"@latticexyz/world/src/WorldResourceId.sol\";\nimport { RESOURCE_SYSTEM } from \"@latticexyz/world/src/worldResourceTypes.sol\";\n \ncontract Call is Script {\n  function run() external {\n    address worldAddress = 0xC14fBdb7808D9e2a37c1a45b635C8C3fF64a1cc1;\n \n    // Load the private key from the `PRIVATE_KEY` environment variable (in .env)\n    uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n \n    // Start broadcasting transactions from the deployer account\n    vm.startBroadcast(deployerPrivateKey);\n \n    ResourceId systemId = WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: \"\", name: \"TasksSystem\" });\n \n    bytes memory returnData = IWorld(worldAddress).call(\n      systemId,\n      abi.encodeWithSignature(\"addTask(string)\", \"Test task\")\n    );\n \n    console.log(\"The return value is:\");\n    console.logBytes(returnData);\n \n    vm.stopBroadcast();\n  }\n}\n```\n\nExplanation\n\n```\nimport { ResourceId, WorldResourceIdLib, WorldResourceIdInstance } from \"@latticexyz/world/src/WorldResourceId.sol\";\nimport { RESOURCE_SYSTEM } from \"@latticexyz/world/src/worldResourceTypes.sol\";\n.\n.\n.\nResourceId systemId = WorldResourceIdLib.encode({\n  typeId: RESOURCE_SYSTEM,\n  namespace: \"\",\n  name: \"TasksSystem\"\n});\n```\n\nCreate a `ResourceId` for the `System`.\n\n```\nbytes memory returnData =\n  IWorld(worldAddress).\n    call(systemId, abi.encodeWithSignature(\"addTask(string)\", \"Test task\"));\n```\n\nCall the `System`. The calldata is created using [`abi.encodeWithSignature` (opens in a new tab)](https://docs.soliditylang.org/en/latest/cheatsheet.html#index-1).\n\nThe return data is of type [`bytes memory` (opens in a new tab)](https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html#bytes-and-string).\n\n## Writing systems[](#writing-systems)\n\nA `System` should _not_ have any internal state, but store all of it in tables in the `World`. There are several reasons for this:\n\n- It allows a `World` to enforce access controls.\n- It allows the same `System` to be used by multiple `World` contracts.\n- Upgrades are a lot simpler when all the state is centralized outside of the `System` contract.\n\nBecause calls to systems are proxied through the `World`, some message fields don't reflect the original call. Use these substitutes:\n\n|Vanilla Solidity|`System` replacement|\n|---|---|\n|`msg.sender`|`_msgSender()`|\n|`msg.value`|`_msgValue()`|\n\nWhen calling other contracts from a `System`, be aware that if you use `delegatecall` the called contract inherits the `System`'s permissions and can modify data in the `World` on behalf of the `System`.\n\n### Calling one `System` from another[](#calling-one-system-from-another)\n\nThere are two ways to call one `System` from another one.\n\n|Call type|`call` to the `World`|`delegatecall` directly to the `System`|\n|---|---|---|\n|Permissions|those of the called `System`|those of the calling `System`|\n|`_msgSender()`|calling `System` (unless you can use `callFrom`, which is only available when the user [delegates](/world/account-delegation) to your `System`)|can use [`WorldContextProvider` (opens in a new tab)](https://github.com/latticexyz/mud/blob/main/packages/world/src/WorldContext.sol#L180-L203) to transfer the correct information|\n|`_msgValue()`|zero|can use [`WorldContextProvider` (opens in a new tab)](https://github.com/latticexyz/mud/blob/main/packages/world/src/WorldContext.sol#L180-L203) to transfer the correct information|\n|Can be used by systems in the root namespace|No (it's a security measure)|Yes|\n\n#### Calling from a root `System`[](#calling-from-a-root-system)\n\nFor [security reasons](/retrospectives/2023-09-12-register-system-vulnerability) the `World` cannot call itself. A `System` in the root namespace runs in the `World` context, and therefore cannot call the `World` either.\n\n🚫\n\nYou _could_ use [`delegatecall` (opens in a new tab)](https://docs.soliditylang.org/en/v0.8.16/introduction-to-smart-contracts.html#delegatecall-callcode-and-libraries), but you should only do it if it's necessary. A root `System` acts as the `World`, so a `delegatecall` from a root `System` behaves exactly like a `delegatecall` from the `World`. Any contract you `delegatecall` inherits your permissions, in this case unlimited access to the `World` and the ability to change everything.\n\nAn alternative solution is for the root `System` to do exactly what the `World` does with a normal call: check for access permission, run before hook (if configured), call the `System`, and then run the after hook (if configured). To do that, you can use [`SystemCall.callWithHooks()` (opens in a new tab)](https://github.com/latticexyz/mud/blob/main/packages/world/src/SystemCall.sol#L77-L114).\n\nIf you need to specify values for [`_msgSender()`](/world/reference/world-context#_msgsender) and [`_msgValue()`](/world/reference/world-context#_msgvalue) to provide for the called `System`, you can use [`WorldContextProviderLib.callWithContext` (opens in a new tab)](https://github.com/latticexyz/mud/blob/main/packages/world/src/WorldContext.sol#L122-L140). Note that this function is _extremely_ low level, and if you use it you have to process hooks and access control yourself.\n\n#### `SystemSwitch`[](#systemswitch)\n\nIf your `System` needs run both from the root namespace and from other namespaces, you can call other `System`s using [`SystemSwitch` (opens in a new tab)](https://github.com/latticexyz/mud/blob/main/packages/world-modules/src/utils/SystemSwitch.sol).\n\n1. Import `SystemSwitch`.\n    \n    ```\n    import { SystemSwitch } from \"@latticexyz/world-modules/src/utils/SystemSwitch.sol\";\n    ```\n    \n2. Import the interface for the system you wish to call.\n    \n    ```\n    import { IIncrementSystem } from \"../codegen/world/IIncrementSystem.sol\";\n    ```\n    \n3. Call the function using `SystemSwitch.call`. For example, here is how you can call [`IncrementSystem.increment()`](/templates/typescript/contracts#incrementsystemsol).\n    \n    ```\n     uint32 returnValue = abi.decode(\n       SystemSwitch.call(\n         abi.encodeCall(IIncrementSystem.increment, ())\n       ),\n       (uint32)\n     );\n    ```\n    \n    Explanation\n    \n    ```\n    abi.encodeCall(IIncrementSystem.increment, ())\n    ```\n    \n    Use [`abi.encodeCall` (opens in a new tab)](https://docs.soliditylang.org/en/latest/cheatsheet.html#abi-encoding-and-decoding-functions) to create the calldata. The first parameter is a pointer to the function. The second parameter is a [tuple (opens in a new tab)](https://docs.soliditylang.org/en/latest/control-structures.html#destructuring-assignments-and-returning-multiple-values) with the function parameters. In this case, there aren't any.\n    \n    The advantage of `abi.encodeCall` is that it checks the types of the function parameters are correct.\n    \n    ```\n    SystemSwitch.call(\n         abi.encodeCall(...)\n    )\n    ```\n    \n    Using `SystemSwitch.call` with the calldata created by `abi.encodeCall`. `SystemSwitch.call` takes care of figuring out details, such as what type of call to use.\n    \n    ```\n    uint32 retval = abi.decode(\n       SystemSwitch.call(...),\n       (uint32)\n    );\n    ```\n    \n    Use [`abi.decode` (opens in a new tab)](https://docs.soliditylang.org/en/latest/cheatsheet.html#abi-encoding-and-decoding-functions) to decode the call's return value. The second parameter is the data type (or types if there are multiple return values).\n    \n\n## Registering systems[](#registering-systems)\n\nFor a `System` to be callable from a `World` it has to be [registered (opens in a new tab)](https://github.com/latticexyz/mud/blob/main/packages/world/src/modules/init/implementations/WorldRegistrationSystem.sol#L115-L178). Only the [namespace owner](/world/namespaces-access-control#ownership) can register a `System` in a namespace.\n\n`System`s can be registered once per `World`, but the same system can be registered in multiple `World`s. If you need multiple instances of a `System` in the same world, you can deploy the `System` multiple times and register the individual deployments individually.\n\nMessagingExtension.s.sol\n\n```\n// SPDX-License-Identifier: MIT\npragma solidity >=0.8.21;\n \nimport { Script } from \"forge-std/Script.sol\";\nimport { console } from \"forge-std/console.sol\";\nimport { IBaseWorld } from \"@latticexyz/world-modules/src/interfaces/IBaseWorld.sol\";\nimport { WorldRegistrationSystem } from \"@latticexyz/world/src/modules/core/implementations/WorldRegistrationSystem.sol\";\n \n// Create resource identifiers (for the namespace and system)\nimport { ResourceId } from \"@latticexyz/store/src/ResourceId.sol\";\nimport { WorldResourceIdLib } from \"@latticexyz/world/src/WorldResourceId.sol\";\nimport { RESOURCE_SYSTEM } from \"@latticexyz/world/src/worldResourceTypes.sol\";\n \n// For registering the table\nimport { Messages, MessagesTableId } from \"../src/codegen/index.sol\";\nimport { IStore } from \"@latticexyz/store/src/IStore.sol\";\nimport { StoreSwitch } from \"@latticexyz/store/src/StoreSwitch.sol\";\n \n// For deploying MessageSystem\nimport { MessageSystem } from \"../src/systems/MessageSystem.sol\";\n \ncontract MessagingExtension is Script {\n  function run() external {\n    uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n    address worldAddress = vm.envAddress(\"WORLD_ADDRESS\");\n    WorldRegistrationSystem world = WorldRegistrationSystem(worldAddress);\n    ResourceId namespaceResource = WorldResourceIdLib.encodeNamespace(bytes14(\"messaging\"));\n    ResourceId systemResource = WorldResourceIdLib.encode(RESOURCE_SYSTEM, \"messaging\", \"MessageSystem\");\n \n    vm.startBroadcast(deployerPrivateKey);\n \n    world.registerNamespace(namespaceResource);\n    StoreSwitch.setStoreAddress(worldAddress);\n    Messages.register();\n    MessageSystem messageSystem = new MessageSystem();\n    world.registerSystem(systemResource, messageSystem, true);\n    world.registerFunctionSelector(systemResource, \"incrementMessage(string)\");\n \n    vm.stopBroadcast();\n  }\n}\n```\n\n`System` registration requires several steps:\n\n1. Create the resource ID for the `System`.\n2. Deploy the `System` contract.\n3. Use [`WorldRegistrationSystem.registerSystem` (opens in a new tab)](https://github.com/latticexyz/mud/blob/main/packages/world/src/modules/init/implementations/WorldRegistrationSystem.sol#L115-L178) to register the `System`. This function takes three parameters:\n    - The ResourceId for the `System`.\n    - The address of the `System` contract.\n    - Access control - whether access to the `System` is public (`true`) or limited to entities with access either to the namespace or the `System` itself (`false`).  \n        \n4. Optionally, register [function selectors](/world/function-selectors) for the `System`.\n\n### Upgrading systems[](#upgrading-systems)\n\nThe namespace owner can upgrade a `System`. This is a two-step process: deploy the contract for the new `System` and then call `registerSystem` with the same `ResourceId` as the old one and the new contract address.\n\nThis upgrade process removes the old `System` contract's access to the namespace, and gives access to the new contract. Any access granted _manually_ to the old `System` is not revoked, nor granted to the upgraded `System`.\n\n**Note:** You _should_ make sure to remove any such manually granted access. MUD access is based on the contract address, so somebody else could register a namespace they'd own, register the old `System` contract as a system in their namespace, and then abuse those permissions (if the `System` has code that can be used for that, of course).\n\nSample code\n\n```\n// SPDX-License-Identifier: MIT\npragma solidity >=0.8.24;\n \nimport { Script } from \"forge-std/Script.sol\";\nimport { console } from \"forge-std/console.sol\";\nimport { System } from \"@latticexyz/world/src/System.sol\";\n \nimport { IWorld } from \"../src/codegen/world/IWorld.sol\";\nimport { Counter } from \"../src/codegen/index.sol\";\n \nimport { ResourceId, WorldResourceIdLib, WorldResourceIdInstance } from \"@latticexyz/world/src/WorldResourceId.sol\";\nimport { RESOURCE_SYSTEM } from \"@latticexyz/world/src/worldResourceTypes.sol\";\n \ncontract IncrementSystem2 is System {\n  function increment() public returns (uint32) {\n    uint32 counter = Counter.get();\n    uint32 newValue = counter + 2;\n    Counter.set(newValue);\n    return newValue;\n  }\n}\n \ncontract UpdateASystem is Script {\n  function run() external {\n    address worldAddress = 0xC14fBdb7808D9e2a37c1a45b635C8C3fF64a1cc1;\n \n    // Load the private key from the `PRIVATE_KEY` environment variable (in .env)\n    uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n \n    // Start broadcasting transactions from the deployer account\n    vm.startBroadcast(deployerPrivateKey);\n \n    // Deploy IncrementSystem2\n    IncrementSystem2 incrementSystem2 = new IncrementSystem2();\n \n    ResourceId systemId = WorldResourceIdLib.encode({\n      typeId: RESOURCE_SYSTEM,\n      namespace: \"\",\n      name: \"IncrementSystem\"\n    });\n \n    IWorld(worldAddress).registerSystem(systemId, incrementSystem2, true);\n \n    vm.stopBroadcast();\n  }\n}\n```\n\nExplanation\n\n```\nimport { ResourceId, WorldResourceIdLib, WorldResourceIdInstance } from \"@latticexyz/world/src/WorldResourceId.sol\";\nimport { RESOURCE_SYSTEM } from \"@latticexyz/world/src/worldResourceTypes.sol\";\n```\n\nTo upgrade a `System` we need the resource ID for it.\n\n```\ncontract IncrementSystem2 is System {\n  function increment() public returns (uint32) {\n    uint32 counter = Counter.get();\n    uint32 newValue = counter + 2;\n    Counter.set(newValue);\n    return newValue;\n  }\n}\n```\n\nThe new `System`. It needs to implement the same `public` functions as the `System` being replaced.\n\n```\n    ...\n \n    // Deploy IncrementSystem2\n    IncrementSystem2 incrementSystem2 = new IncrementSystem2();\n```\n\nDeploy the new `System`.\n\n```\n    ResourceId systemId = WorldResourceIdLib.encode(\n      { typeId: RESOURCE_SYSTEM,\n        namespace: \"\",\n        name: \"IncrementSystem\"\n      });\n```\n\nGet the `ResourceId` for the `System`.\n\n```\n    IWorld(worldAddress).registerSystem(systemId, incrementSystem2, true);\n```\n\nRegister the new `System`. This removes the existing `System` and the access automatically granted to it.\n\n## Access control[](#access-control)\n\nWhen you register a `System`, you can specify whether it is going to be private or public.\n\n- A public `System` has no access control checks, it can be called by anybody. This is the main mechanism for user interaction with a MUD application.\n    \n- A private `System` can only be called by accounts that have access. This access can be the result of:\n    \n    - Access permission to the namespace in which the `System` is registered.\n    - Access permission specifically to the `System`.\n\nNote that `System`s have access to their own namespace by default, so public `System`s can call private `System`s in their namespace.\n\n## Root systems[](#root-systems)\n\nThe `World` uses `call` for systems in other namespaces, but `delegatecall` for those in the root namespace (`bytes14(0)`). As a result, root systems have access to the `World` contract's storage. Because of this access, root systems use [the internal `StoreCore` methods (opens in a new tab)](https://github.com/latticexyz/mud/blob/main/packages/store/src/StoreCore.sol), which are slightly cheaper than calling [the external `IStore` methods (opens in a new tab)](https://github.com/latticexyz/mud/blob/main/packages/store/src/IStore.sol) used by other systems. Note that the table libraries abstract this difference, so normally there is no reason to be concerned about it.\n\nAnother effect of having access to the storage of the `World` is that root systems could, in theory, overwrite any information in any table regardless of access control. Only the [owner of the root namespace](/world/namespaces-access-control) can register root systems. We recommend to only use the root namespace when strictly necessary.\n\n[Tables](/world/tables \"Tables\")[System Hooks](/world/system-hooks \"System Hooks\")\n\n---\n\nMIT 2023 © MUD\n\nSystems – MUD","x":-640,"y":-3767,"width":894,"height":967,"color":"6"},
		{"id":"c69dd0793e94d2e2","type":"text","text":"```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport { System } from \"@latticexyz/world/src/System.sol\";\nimport { Player, Lore, LoreData, PlayerData } from \"../codegen/index.sol\";\nimport { addressToEntityKey } from \"../addressToEntityKey.sol\";\n\ncontract SpawnPlayerSystem is System {\n  function spawnPlayer(PlayerData calldata data, LoreData calldata lore) public {\n    // Ensure the player does not already exist\n    bytes32 id = addressToEntityKey(msg.sender);\n    PlayerData memory existingPlayer = Player.get(id);\n    require(existingPlayer.health == 0, \"Player already exists\"); // Assuming health is 0 for non-existent players\n\n    // Create the player\n    Player.set(id, PlayerData({ x: data.x, y: data.y, health: data.health, name: data.name }));\n    Lore.set(id, lore.alignment, lore.backstory, lore.currentQuest);\n  }\n}\n\n```","x":320,"y":-3488,"width":476,"height":570,"color":"6"},
		{"id":"88c688ed2f6b3903","type":"text","text":"```ts\nimport React from \"react\";\nimport Image from \"next/image\";\nimport LoreDisplay from \"./LoreDisplay\";\nimport { pixelArt } from \"@dicebear/collection\";\nimport { createAvatar } from \"@dicebear/core\";\n\nconst PlayerList = (props: { players: any }) => {\n  const { players } = props;\n  return (\n    <div className=\"p-5 bg-gray-100 rounded-lg shadow-md overflow-scroll max-h-svh flex justify-items-end\">\n      <h2 className=\"mb-5 text-2xl font-bold text-gray-800\">Players:</h2>\n      <ul>\n        {players.map(player => {\n          const avatarSvg = createAvatar(pixelArt, {\n            seed: player.value.name,\n            dataUri: true,\n          });\n          return (\n            <li key={player.id} className=\"flex p-4 mb-4 bg-white rounded-lg shadow-sm hover:bg-gray-50\">\n              <div className=\"flex-1\">\n                <h3 className=\"text-xl font-semibold text-blue-600\">{player.value.name}</h3>\n                <p className=\"mt-2 text-gray-700\">\n                  <strong>Coordinates:</strong> (x: {player.value.x}, y: {player.value.y})\n                </p>\n                <p className=\"mt-1 text-gray-700\">\n                  <strong>Health:</strong> {player.value.health}\n                </p>\n                <LoreDisplay entityId={player.key.id} />\n              </div>\n              <div className=\"ml-4\">\n                <Image\n                  className=\"w-12 h-12 rounded-full\"\n                  src={avatarSvg.toDataUriSync()}\n                  alt={`${player.value.name}'s avatar`}\n                  width={48}\n                  height={48}\n                />\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n```","x":818,"y":-1290,"width":281,"height":254,"color":"6"},
		{"id":"a483e59e901b60b9","type":"text","text":"```ts\nimport { ClientComponents } from \"./createClientComponents\";\nimport { SetupNetworkResult } from \"./setupNetwork\";\nimport { getComponentValue } from \"@latticexyz/recs\";\nimport { uuid } from \"@latticexyz/utils\";\nimport { toast } from \"react-hot-toast\";\nimport { usePlayerStore } from \"~~/services/store/playerStore\";\n\nexport type SystemCalls = ReturnType<typeof createSystemCalls>;\nexport function createSystemCalls(\n  { playerEntity, worldContract, waitForTransaction }: SetupNetworkResult,\n  { Player, Lore }: ClientComponents,\n) {\n  const spawn = async () => {\n    if (!playerEntity) {\n      throw new Error(\"no player\");\n    }\n    const canSpawn = getComponentValue(Player, playerEntity)?.value !== true;\n    const playerName = usePlayerStore.getState().playerName;\n\n    const lore = usePlayerStore.getState().lore;\n    if (!canSpawn) {\n      throw new Error(\"already spawned\");\n    }\n    const playerId = uuid();\n    Player.addOverride(playerId, {\n      entity: playerEntity,\n      value: { value: true },\n    });\n    const args = {\n      x: 0,\n      y: 0,\n      health: 100,\n      name: playerName,\n    };\n\n    toast.loading(\"Spawning player...\");\n    try {\n      const tx = await worldContract.write.spawnPlayer([args, lore]);\n      await waitForTransaction(tx);\n    } catch (error) {\n      console.error(\"Spawn transaction failed:\", error);\n    } finally {\n      setTimeout(() => {\n        Player.removeOverride(playerId);\n        toast.dismiss();\n        toast.success(`Player spawned! ${playerName}`);\n      }, 1000);\n    }\n  };\n\n  return {\n    spawn,\n  };\n}\n\n```","x":1441,"y":-2853,"width":752,"height":780,"color":"6"},
		{"id":"c0a014ef191a71b1","type":"text","text":"```ts\nimport React from \"react\";\nimport PlayerInput from \"../PlayerInput\";\nimport PlayerList from \"../PlayerList\";\nimport { useMUD } from \"./MUDContext\";\n\nconst GameBoard = () => {\n  const {\n    network: { useStore, tables },\n  } = useMUD();\n\n  const records = useStore(state => Object.values(state.getRecords(tables.Player)));\n\n  return (\n    <div className=\"container flex flex-row mx-auto w-full h-full\">\n      <PlayerInput />\n      <PlayerList players={records} />\n    </div>\n  );\n};\n\nexport default GameBoard;\n```","x":1280,"y":-691,"width":703,"height":540,"color":"6"},
		{"id":"0a8e77f485f6faa2","type":"text","text":"```ts\nimport React from \"react\";\nimport { useMUD } from \"./mud/MUDContext\";\n\nconst LoreDisplay = ({ entityId }) => {\n  const {\n    network: { playerEntity, useStore, tables },\n  } = useMUD();\n\n  const lore = useStore(state => Object.values(state.getRecords(tables.Lore)));\n  console.log(\"All Lore:\", lore); // Log all lore objects\n  console.log(\"Entity ID:\", entityId); // Log the entityId being searched for\n\n  const myLore = lore.find(item => item.key.id === entityId);\n  console.log(\"Found Lore:\", myLore); // Log the found lore object\n\n  if (!myLore) return <div>No lore available for this entity.</div>;\n\n  return (\n    <div className=\"p-5 bg-gray-100 rounded-lg shadow-md\">\n      <h2 className=\"mb-5 text-2xl font-bold text-gray-800\">Lore:</h2>\n      <p>\n        <strong>Alignment:</strong> {myLore.value.alignment}\n      </p>\n      <p>\n        <strong>Backstory:</strong> {myLore.value.backstory}\n      </p>\n      <p>\n        <strong>Current Quest:</strong> {myLore.value.currentQuest}\n      </p>\n    </div>\n  );\n};\n```","x":475,"y":-728,"width":687,"height":577,"color":"6"},
		{"id":"aad702861a9c001f","type":"text","text":"```ts\nimport React, { useState } from \"react\";\nimport { useMUD } from \"./mud/MUDContext\";\nimport { usePlayerStore } from \"~~/services/store/playerStore\";\n\nconst PlayerInput = () => {\n  const playerName = usePlayerStore(state => state.playerName);\n  const setPlayerName = usePlayerStore(state => state.setPlayerName);\n  const { lore, setLore } = usePlayerStore();\n\n  const {\n    systemCalls: { spawn },\n  } = useMUD();\n\n  return (\n    <div className=\"p-2 form-control\">\n      <h2 className=\"mb-5 text-2xl font-bold text-gray-800\">Edit Lore:</h2>\n      <div>\n        <label className=\"label\">Player Name</label>\n        <input\n          className=\"input\"\n          type=\"text\"\n          value={playerName}\n          onChange={e => setPlayerName(e.target.value)}\n          placeholder=\"Enter player name\"\n        />\n      </div>\n      <div>\n        <label className=\"label\">Alignment:</label>\n        <input\n          className=\"input\"\n          value={lore.alignment}\n          onChange={e => setLore({ ...lore, alignment: e.target.value })}\n        />\n      </div>\n      <div>\n        <label className=\"label\">Backstory:</label>\n        <textarea\n          className=\"input\"\n          value={lore.backstory}\n          onChange={e => setLore({ ...lore, backstory: e.target.value })}\n        />\n      </div>\n      <div>\n        <label className=\"label\">Current Quest:</label>\n        <input\n          className=\"input\"\n          value={lore.currentQuest}\n          onChange={e => setLore({ ...lore, currentQuest: e.target.value })}\n        />\n      </div>\n\n      <button className=\"btn\" onClick={spawn}>\n        spawn\n      </button>\n    </div>\n  );\n};\n\nexport default PlayerInput;\n```","x":320,"y":-965,"width":430,"height":460,"color":"6"},
		{"id":"934f4b73cd06e72e","type":"text","text":"```ts\nimport { getNetworkConfig } from \"./getNetworkConfig\";\nimport { world } from \"./world\";\nimport { ContractWrite, createBurnerAccount, transportObserver } from \"@latticexyz/common\";\nimport { transactionQueue, writeObserver } from \"@latticexyz/common/actions\";\nimport { createFaucetService } from \"@latticexyz/services/faucet\";\nimport { encodeEntity, syncToRecs } from \"@latticexyz/store-sync/recs\";\nimport { syncToZustand } from \"@latticexyz/store-sync/zustand\";\nimport mudConfig from \"contracts/mud.config\";\nimport IWorldAbi from \"contracts/out/IWorld.sol/IWorld.abi.json\";\nimport { Subject, share } from \"rxjs\";\nimport {\n  ClientConfig,\n  Hex,\n  createPublicClient,\n  createWalletClient,\n  fallback,\n  getContract,\n  http,\n  parseEther,\n  webSocket,\n} from \"viem\";\n\nexport type SetupNetworkResult = Awaited<ReturnType<typeof setupNetwork>>;\nexport async function setupNetwork() {\n  const networkConfig = await getNetworkConfig();\n  const clientOptions = {\n    chain: networkConfig.chain,\n    transport: transportObserver(fallback([webSocket(), http()])),\n    pollingInterval: 1000,\n  } as const satisfies ClientConfig;\n  const publicClient = createPublicClient(clientOptions);\n  const write$ = new Subject<ContractWrite>();\n  const burnerAccount = createBurnerAccount(networkConfig.privateKey as Hex);\n  const burnerWalletClient = createWalletClient({\n    ...clientOptions,\n    account: burnerAccount,\n  })\n    .extend(transactionQueue())\n    .extend(writeObserver({ onWrite: write => write$.next(write) }));\n  const worldContract = getContract({\n    address: networkConfig.worldAddress as Hex,\n    abi: IWorldAbi,\n    client: { public: publicClient, wallet: burnerWalletClient },\n  });\n  const { components, latestBlock$, storedBlockLogs$, waitForTransaction } = await syncToRecs({\n    world,\n    config: mudConfig,\n    address: networkConfig.worldAddress as Hex,\n    publicClient,\n    startBlock: BigInt(networkConfig.initialBlockNumber),\n  });\n  const { tables, useStore } = await syncToZustand({\n    config: mudConfig,\n    address: networkConfig.worldAddress as Hex,\n    publicClient,\n    startBlock: BigInt(networkConfig.initialBlockNumber),\n  });\n  if (networkConfig.faucetServiceUrl) {\n    const address = burnerAccount.address;\n    console.info(\"[Dev Faucet]: Player address -> \", address);\n    const faucet = createFaucetService(networkConfig.faucetServiceUrl);\n    const requestDrip = async () => {\n      const balance = await publicClient.getBalance({ address });\n      console.info(`[Dev Faucet]: Player balance -> ${balance}`);\n      const lowBalance = balance < parseEther(\"1\");\n      if (lowBalance) {\n        console.info(\"[Dev Faucet]: Balance is low, dripping funds to player\");\n        await faucet.dripDev({ address });\n        await faucet.dripDev({ address });\n      }\n    };\n    requestDrip();\n    setInterval(requestDrip, 20000);\n  }\n  return {\n    tables,\n    useStore,\n    world,\n    components,\n    playerEntity: encodeEntity({ address: \"address\" }, { address: burnerWalletClient.account.address }),\n    publicClient,\n    walletClient: burnerWalletClient,\n    latestBlock$,\n    storedBlockLogs$,\n    waitForTransaction,\n    worldContract,\n    write$: write$.asObservable().pipe(share()),\n  };\n}\n\n```","x":-2164,"y":-3508,"width":553,"height":1020},
		{"id":"919152704c3bf2ee","type":"text","text":"Creating a new table for the game inventory involves updating both your Solidity smart contracts and the MUD configuration files. Here's a step-by-step guide to create a new table called `game:Inventory` which will store information about the items that players have in their inventory.\n\n### Step 1: Define the Table in MUD Configuration\n\nFirst, you need to define your new table in the MUD configuration file, typically a YAML file that lists all your tables. Let's assume your configuration file is named `tables.yaml` and you're adding a new table definition for `Inventory`.\n\nExample `tables.yaml`:\n\n```yaml\ntables:\n  Inventory:\n    namespace: game\n    keySchema:\n      playerAddress: address\n      itemId: uint256\n    valueSchema:\n      itemName: string\n      itemCount: uint256\n```\n\nThis configuration sets up the table in the `game` namespace with `playerAddress` and `itemId` as keys, and `itemName` and `itemCount` as values.\n\n### Step 2: Generate Solidity Code\n\nRun the MUD code generation tool to create the necessary Solidity code to work with your new table.\n\n```sh\nmud tablegen\n```\n\nThis will generate the necessary Solidity files for the `Inventory` table, typically placing them in the `src/codegen/` directory.\n\n### Step 3: Update Smart Contract to Use the Inventory Table\n\nNow, let's create a new Solidity script to interact with the `game:Inventory` table. This script will demonstrate reading from and writing to the `Inventory` table.\n\nCreate a new file called `ManageInventory.s.sol`:\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity >=0.8.24;\n\nimport { Script } from \"forge-std/Script.sol\";\nimport { console } from \"forge-std/console.sol\";\nimport { StoreSwitch } from \"@latticexyz/store/src/StoreSwitch.sol\";\nimport { Inventory, InventoryData } from \"../src/codegen/index.sol\";\n\ncontract ManageInventory is Script {\n    function run() external {\n        address worldAddress = 0xC14fBdb7808D9e2a37c1a45b635C8C3fF64a1cc1;\n        StoreSwitch.setStoreAddress(worldAddress);\n\n        // Example player address and item details\n        address playerAddress = 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC;\n        uint256 itemId = 1;\n        string memory itemName = \"Sword\";\n        uint256 itemCount = 10;\n\n        // Load the private key from the `PRIVATE_KEY` environment variable (in .env)\n        uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n\n        // Start broadcasting transactions from the deployer account\n        vm.startBroadcast(deployerPrivateKey);\n\n        // Add item to inventory\n        Inventory.set(playerAddress, itemId, InventoryData({\n            itemName: itemName,\n            itemCount: itemCount\n        }));\n\n        vm.stopBroadcast();\n\n        // Read the inventory\n        InventoryData memory data = Inventory.get(playerAddress, itemId);\n        console.log(\"Item Name:\", data.itemName);\n        console.log(\"Item Count:\", data.itemCount);\n    }\n}\n```\n\nIn the above script:\n- We set the store address to the `World` contract's address.\n- We use the `set` method to add an item to the inventory.\n- We use the `get` method to fetch the inventory details.\n\n### Step 4: Deploy and Test\n\nFinally, you need to deploy your updated contracts and run the script to interact with the `Inventory` table.\n\n```sh\nforge script ManageInventory.s.sol --rpc-url YOUR_RPC_URL --broadcast --private-key YOUR_PRIVATE_KEY\n```\n\n### Explanation of the Script\n\n```solidity\naddress playerAddress = 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC;\nuint256 itemId = 1;\nstring memory itemName = \"Sword\";\nuint256 itemCount = 10;\n```\n\nSet up the example details for a player who has 10 \"Sword\" items.\n\n```solidity\nInventory.set(playerAddress, itemId, InventoryData({\n    itemName: itemName,\n    itemCount: itemCount\n}));\n```\n\nAdd these details to the `Inventory` table.\n\n```solidity\nInventoryData memory data = Inventory.get(playerAddress, itemId);\nconsole.log(\"Item Name:\", data.itemName);\nconsole.log(\"Item Count:\", data.itemCount);\n```\n\nFetch and print the details from the `Inventory` table.\n\nThis script sets the foundation for interacting with the `game:Inventory` table in your Solidity smart contracts using MUD.","x":-2164,"y":-3603,"width":729,"height":877},
		{"id":"986bdf8c2caeb0ae","type":"text","text":"Create a new Table for the game inventory","x":-1799,"y":-3270,"width":342,"height":272},
		{"id":"4c7f2c09e6f79de1","type":"text","text":"Alright, let's review and create the system calls to handle the new inventory and item management systems. We'll extend the current system calls to include new functions for interacting with the `InventorySystem`. This will enable you to add items, manage player's inventory, and update item counts seamlessly.\n\nHere's an updated version of the system calls to include functions for the newly created `InventorySystem`:\n\n```ts\nimport { ClientComponents } from \"./createClientComponents\";\nimport { SetupNetworkResult } from \"./setupNetwork\";\nimport { getComponentValue } from \"@latticexyz/recs\";\nimport { uuid } from \"@latticexyz/utils\";\nimport { toast } from \"react-hot-toast\";\nimport { usePlayerStore } from \"~~/services/store/playerStore\";\n\nexport type SystemCalls = ReturnType<typeof createSystemCalls>;\n\nexport function createSystemCalls(\n  { playerEntity, worldContract, waitForTransaction }: SetupNetworkResult,\n  { Player, Lore, Item, Inventory }: ClientComponents,\n) {\n  // Spawn player function\n  const spawn = async () => {\n    if (!playerEntity) {\n      throw new Error(\"no player\");\n    }\n    const canSpawn = getComponentValue(Player, playerEntity)?.value !== true;\n    const playerName = usePlayerStore.getState().playerName;\n    const lore = usePlayerStore.getState().lore;\n\n    if (!canSpawn) {\n      throw new Error(\"already spawned\");\n    }\n\n    const playerId = uuid();\n    Player.addOverride(playerId, {\n      entity: playerEntity,\n      value: { value: true },\n    });\n\n    const args = {\n      x: 0,\n      y: 0,\n      health: 100,\n      name: playerName,\n    };\n\n    toast.loading(\"Spawning player...\");\n    try {\n      const tx = await worldContract.write.spawnPlayer([args, lore]);\n      await waitForTransaction(tx);\n    } catch (error) {\n      console.error(\"Spawn transaction failed:\", error);\n    } finally {\n      setTimeout(() => {\n        Player.removeOverride(playerId);\n        toast.dismiss();\n        toast.success(`Player spawned! ${playerName}`);\n      }, 1000);\n    }\n  };\n\n  // Add item function\n  const addItem = async (name: string, description: string) => {\n    toast.loading(\"Adding item...\");\n    try {\n      const tx = await worldContract.write.addItem([name, description]);\n      await waitForTransaction(tx);\n      toast.success(\"Item added successfully!\");\n    } catch (error) {\n      console.error(\"Add item transaction failed:\", error);\n      toast.error(\"Failed to add item.\");\n    } finally {\n      toast.dismiss();\n    }\n  };\n\n  // Add item to inventory function\n  const addItemToInventory = async (playerId: string, itemId: string, count: number) => {\n    toast.loading(\"Adding item to inventory...\");\n    try {\n      const tx = await worldContract.write.addItemToInventory([playerId, itemId, count]);\n      await waitForTransaction(tx);\n      toast.success(\"Item added to inventory!\");\n    } catch (error) {\n      console.error(\"Add item to inventory transaction failed:\", error);\n      toast.error(\"Failed to add item to inventory.\");\n    } finally {\n      toast.dismiss();\n    }\n  };\n\n  // Update item count in inventory function\n  const updateItemCount = async (playerId: string, itemId: string, newCount: number) => {\n    toast.loading(\"Updating item count in inventory...\");\n    try {\n      const tx = await worldContract.write.updateItemCount([playerId, itemId, newCount]);\n      await waitForTransaction(tx);\n      toast.success(\"Item count updated!\");\n    } catch (error) {\n      console.error(\"Update item count transaction failed:\", error);\n      toast.error(\"Failed to update item count in inventory.\");\n    } finally {\n      toast.dismiss();\n    }\n  };\n\n  return {\n    spawn,\n    addItem,\n    addItemToInventory,\n    updateItemCount,\n  };\n}\n```\n\n### Explanation of System Calls\n\n1. **`spawn` function:**\n   - This function handles spawning a player entity. It initializes player properties and registers the player on the blockchain.\n\n2. **`addItem` function:**\n   - This function interacts with the `InventorySystem` to add a new item to the system.\n   - It accepts the `name` and `description` of the item as parameters. \n   - Uses `toast` to show notifications for loading, success, and error states.\n\n3. **`addItemToInventory` function:**\n   - This function is responsible for adding an item to a player's inventory.\n   - It takes `playerId`, `itemId`, and item `count` as parameters.\n   - Uses `toast` for loading, success, and error notifications.\n\n4. **`updateItemCount` function:**\n   - This function handles updating the item count in the player's inventory.\n   - Accepts `playerId`, `itemId`, and `newCount` as parameters.\n   - Utilizes `toast` for indicating loading, success, and error states.\n\n### Integration Steps\n\n1. **Integrate the System Calls**:\n   - Ensure these functions are integrated within your application's logic.\n   - Call these functions appropriately based on user interactions or game logic.\n\n2. **Update the Smart Contract Deploy Scripts**:\n   - Make sure that the new `InventorySystem` contract is deployed and registered in the world as shown in the previous examples.\n\n3. **Update the UI**:\n   - Integrate front-end components, such as forms and buttons, to enable users to interact with these system calls.\n\nWith these system calls in place, you will be able to effectively manage the inventory and items within your application, thereby providing a robust and interactive user experience.","x":1320,"y":-1742,"width":705,"height":706,"color":"6"},
		{"id":"c28a9e695dd98b79","type":"text","text":"","x":28,"y":-2200,"width":584,"height":666,"color":"6"},
		{"id":"2e92fe91a7bc60f7","type":"text","text":"```ts\nimport { defineWorld } from \"@latticexyz/world\";\n\n// Define enums for better type safety and readability\nconst EntityType = [\"Player\"];\n\nexport default defineWorld({\n  enums: {\n    EntityType,\n  },\n  tables: {\n    Player: {\n      schema: {\n        id: \"bytes32\",\n        x: \"int32\",\n        y: \"int32\",\n        health: \"uint32\",\n        name: \"string\",\n      },\n      key: [\"id\"],\n    },\n    Lore: {\n      schema: {\n        id: \"bytes32\",\n        alignment: \"string\",\n        backstory: \"string\",\n        currentQuest: \"string\",\n      },\n      key: [\"id\"],\n    },\n    Inventory: {\n      schema: {\n        ownerId: \"bytes32\",\n        itemId: \"uint256[]\",\n      },\n      key: [\"ownerId\"],\n    },\n    Item: {\n      schema: {\n        itemId: \"uint256\",\n        itemCount: \"uint256\",\n        itemName: \"string\",\n      },\n      key: [\"itemId\"],\n    },\n  },\n  deploy: {\n    upgradeableWorldImplementation: true,\n  },\n});\n```","x":-2000,"y":-1840,"width":720,"height":1100,"color":"6"},
		{"id":"9ad82fc37002cbd3","type":"text","text":"# TABLES\n\nEach piece of data in `Store` is stored as a _record_ in a _table_. You can think of tables in two ways, either [as a relational database](https://mud.dev/store/data-model) or as a key-value store.\n\n- Each table is identified by a unique `ResourceId tableId`.\n- Each record in a table is identified by a unique `bytes32[] keyTuple`. You can think of the key tuple as a composite key in a relational database, or as a nested mapping in a key-value store.\n- Each table has a value schema (all the `schema` fields that aren't part of the `key`) that defines the types of data stored in the table. You can think of the value schema as the column types in a table in a relational database, or the type of structs stored in a key-value store.\n\nTables are registered in the `Store` contract at runtime. When a table is registered, its ID, key and value types, as well as key and field names are stored in the internal `Tables` table. This emits an event that can be used by [offchain indexers](https://mud.dev/services/indexer) to start [replicating the state](https://mud.dev/guides/replicating-onchain-state) of the new table.\n\nThe recommended way of reading from tables and writing to tables is via the [typed table libraries](https://mud.dev/store/table-libraries). However, it is also possible to use the low-level [`IStore` (external)](https://mud.dev/store/reference/store) or [`StoreCore` (internal)](https://mud.dev/store/reference/store-core) API directly.\n\n⚠️\n\nOnce a table is created its schema is _immutable_. If you need to add fields to an existing table, create a new table with the same key schema and the new fields in the value schema, and retrieve from both tables to get the complete value. If you need to delete fields, just have your code ignore them.\n\n## TYPES OF TABLES[](https://mud.dev/store/tables#types-of-tables)\n\nThere are two types of tables in `Store`: _Onchain tables_ and _offchain tables_. We often omit the prefix from onchain tables and just call them tables.\n\nAs the name suggests, **onchain tables** store their state onchain, in the `Store` contract. In addition, an event is emitted on every write operation, to allow [offchain indexers](https://mud.dev/services/indexer) to [replicate the onchain state](https://mud.dev/guides/replicating-onchain-state).\n\n**Offchain tables** on the other hand don't store any state onchain, but only emit the events for [offchain indexers](https://mud.dev/services/indexer). This makes them suitable for use cases where data doesn't need to be retrieved onchain, but should still be synchronized from the `Store` contract to [offchain indexers](https://mud.dev/services/indexer).\n\nOnchain you can write to offchain tables with the same methods as onchain tables, except for reading data and modifying partial data in a dynamic field.","x":-2198,"y":-2120,"width":191,"height":202,"color":"6"},
		{"id":"b31e83727da6c445","type":"text","text":"# TABLE LIBRARIES\n\nMethods on [`StoreCore`](https://mud.dev/references/store-core) and [`IStore`](https://mud.dev/references/store) use raw bytes as input and output types. This is to allow using the same methods for different types of tables types without native support for generics in Solidity, but it can be inconvenient to work with. For this reason MUD automatically generates a library for each table that provides typed methods corresponding to the table's key and value types.\n\n## CONFIG[](https://mud.dev/store/table-libraries#config)\n\nTable libraries are generated by the [`tablegen`](https://mud.dev/cli/tablegen) CLI. The [CLI config](https://mud.dev/cli/config) section goes into more detail on the available configuration options.\n\nTo illustrate table library functionality on this page, we'll use two example tables with the following configurations:\n\nPosition\n\n```\nschema: {  entity: \"address\",   // Two static length fields  x: \"uint32\",  y: \"uint32\",},key: [\"entity\"],\n```\n\nInventory\n\n```\nschema: {  entity: \"address\",   // One dynamic length field  slots: \"uint8[]\",},key: [\"entity\"],\n```\n\n### SINGLETON TABLES[](https://mud.dev/store/table-libraries#singleton-tables)\n\nWhen you just need to store a single value (for example, the world map or the name of an in-game currency), you use a singleton table, a table whose key schema is empty. With an empty key schema there is just one record.\n\nCounter\n\n```\nschema: {  value: \"uint32\",},key: [],\n```\n\n## USAGE[](https://mud.dev/store/table-libraries#usage)\n\n### IMPORTING THE LIBRARY[](https://mud.dev/store/table-libraries#importing-the-library)\n\nBy default table libraries are generated into a `codegen/tables` directory in the contract directory. This can be configured with the `codegenDirectory` option in the [config](https://mud.dev/cli/config). The library name corresponds to the table's key in the table config.\n\n```\nimport { Position } from \"./codegen/tables/Position.sol\";import { Inventory } from \"./codegen/tables/Inventory.sol\";\n```\n\nFor convenience, the [`tablegen`](https://mud.dev/cli/tablegen) CLI also generates an `index.sol` file that re-exports all the generated table libraries.\n\n```\nimport { Position, Inventory } from \"./codegen/tables/index.sol\";\n```\n\n### REGISTERING THE TABLE[](https://mud.dev/store/table-libraries#registering-the-table)\n\nBefore using the table library, it must be registered once in the Store. This happens automatically as part of the [deploy CLI](https://mud.dev/cli/deploy), but if you're using the table library in a [Module](https://mud.dev/world/modules) or a contract that's not deployed by MUD, you'll need to register it manually.\n\n```\nPosition.register();Inventory.register();\n```\n\nThe table library will detect the `Store` context automatically (via [`StoreSwitch`](https://mud.dev/store/table-libraries#storeswitch)).\n\n### READING DATA[](https://mud.dev/store/table-libraries#reading-data)\n\nTable libraries provide typed methods for reading data from the `Store`.\n\n#### READ FULL RECORD[](https://mud.dev/store/table-libraries#read-full-record)\n\nTo read the entire record, use the `get` method. If the table's value schema contains more than one field, the method returns a struct with the corresponding fields.\n\n```\nimport { Position, PositionData } from \"./codegen/tables/Position.sol\"; address entity = address(0x1234);PositionData memory position = Position.get(entity);\n```\n\n#### READ INDIVIDUAL FIELDS[](https://mud.dev/store/table-libraries#read-individual-fields)\n\nTo read a single field, use the `get` method with the field name as a suffix.\n\n```\nimport { Position } from \"./codegen/tables/Position.sol\"; address entity = address(0x1234);uint32 x = Position.getX(entity);\n```\n\n#### READ LENGTH OF DYNAMIC LENGTH FIELD[](https://mud.dev/store/table-libraries#read-length-of-dynamic-length-field)\n\nTo read the length of a dynamic length field, use the `length` method with the field name as a suffix.\n\n```\nimport { Inventory } from \"./codegen/tables/Inventory.sol\"; address entity = address(0x1234);uint256 length = Inventory.lengthSlots(entity);\n```\n\n#### READ INDIVIDUAL ELEMENTS OF DYNAMIC LENGTH FIELD[](https://mud.dev/store/table-libraries#read-individual-elements-of-dynamic-length-field)\n\nTo read individual fields of a dynamic length field, use the `getItem` method with the field name as a suffix and the index as an argument.\n\n```\nimport { Inventory } from \"./codegen/tables/Inventory.sol\"; address entity = address(0x1234);uint8 item = Inventory.getItemSlots(entity, 0);\n```\n\n### WRITING DATA[](https://mud.dev/store/table-libraries#writing-data)\n\nTable libraries provide typed methods for writing data to the `Store`.\n\n#### WRITE FULL RECORD[](https://mud.dev/store/table-libraries#write-full-record)\n\nTo write the entire record, use the `set` method. There is a variant of this method that accepts a struct, and a variant that accepts the individual fields.\n\n```\nimport { Position, PositionData } from \"./codegen/tables/Position.sol\"; address entity = address(0x1234); // set with individual fieldsPosition.set(entity, 1, 2); // or set with structPosition.set(entity, PositionData(1,2));\n```\n\n#### WRITE INDIVIDUAL FIELDS[](https://mud.dev/store/table-libraries#write-individual-fields)\n\nTo write a single field, use the `set` method with the field name as a suffix.\n\n```\nimport { Position } from \"./codegen/tables/Position.sol\"; address entity = address(0x1234);Position.setX(entity, 1);\n```\n\n#### WRITE INDIVIDUAL ELEMENTS OF DYNAMIC LENGTH FIELD[](https://mud.dev/store/table-libraries#write-individual-elements-of-dynamic-length-field)\n\nTo write individual fields of a dynamic length field, use the `update` method with the field name as a suffix and the index as an argument.\n\n```\nimport { Inventory } from \"./codegen/tables/Inventory.sol\"; address entity = address(0x1234);Inventory.updateSlots(entity, 0, 1);\n```\n\n#### PUSH TO DYNAMIC LENGTH FIELD[](https://mud.dev/store/table-libraries#push-to-dynamic-length-field)\n\nTo push a new element to a dynamic length field, use the `push` method with the field name as a suffix.\n\n```\nimport { Inventory } from \"./codegen/tables/Inventory.sol\"; address entity = address(0x1234);Inventory.pushSlots(entity, 1);\n```\n\n#### POP FROM DYNAMIC LENGTH FIELD[](https://mud.dev/store/table-libraries#pop-from-dynamic-length-field)\n\nTo remove the last element from a dynamic length field, use the `pop` method with the field name as a suffix.\n\n```\nimport { Inventory } from \"./codegen/tables/Inventory.sol\"; address entity = address(0x1234);Inventory.popSlots(entity);\n```\n\nNote that this method does not return the popped element. If you need to access the popped element, use the `getItem` method before calling `pop`.\n\n```\nimport { Inventory } from \"./codegen/tables/Inventory.sol\"; address entity = address(0x1234);uint256 length = Inventory.lengthSlots(entity);uint8 lastItem = Inventory.getItemSlots(entity,  length - 1);Inventory.popSlots(entity);\n```\n\n## ADVANCED[](https://mud.dev/store/table-libraries#advanced)\n\n### STORESWITCH[](https://mud.dev/store/table-libraries#storeswitch)\n\nTable libraries internally use the `StoreSwitch` library to write data to the Store. `StoreSwitch` detects whether the library is called from within a `Store` contract or from an external contract that has a reference to the `Store` contract.\n\n1. If the library is called from within a `Store` contract, `StoreSwitch` accesses the store directly via the [internal `StoreCore` library](https://mud.dev/store/reference/store-core).\n2. If the library is called from a contract that has a fixed reference to a specific external `Store` contract, `StoreSwitch` accesses this `Store` via the [external `IStore` interface](https://mud.dev/store/reference/store).\n3. If `msg.sender` is a `Store` contract, `StoreSwitch` accesses the `Store` via the caller's address via the [external `IStore` interface](https://mud.dev/store/reference/store).\n\nTo fix a reference to a specific `Store` contract (2), use the `StoreSwitch.setStoreAddress` method in your contract.\n\n```\nimport { StoreSwitch } from \"@latticexyz/store/src/StoreSwitch.sol\"; StoreSwitch.setStoreAddress(STORE_ADDRESS);\n```\n\nThis can be useful to test libraries using table libraries in isolation, by setting the `Store` address in the test contract to a mock `Store` contract. This happens automatically in the [`MudTest`](https://mud.dev/cli/test) setup.","x":-2120,"y":-2220,"width":396,"height":280,"color":"6"},
		{"id":"29d51ef5e557d3bc","type":"text","text":"Sure, let's make the necessary improvements for the Item and Inventory tables by following best practices for robustness and clarity. Here are a few changes we'll make:\n\n1. Consider using unique identifiers for Items to avoid potential conflicts.\n2. Ensure the Inventory table is designed to handle multiple items for each owner with clear associations.\n\nFirst, we'll need to import a library for handling unique identifiers, such as `uuid`. Here is how we can do that:\n\n```bash\n# Install uuid library if it's not already installed\nnpm install uuid\n```\n\nNext, the refactored world definition with robust changes would be:\n\n```ts\nimport { defineWorld } from \"@latticexyz/world\";\nimport { v4 as uuidv4 } from 'uuid';\n\n// Define enums for better type safety and readability\nconst EntityType = [\"Player\"];\n\nexport default defineWorld({\n  enums: {\n    EntityType,\n  },\n  tables: {\n    Player: {\n      schema: {\n        id: \"bytes32\",\n        x: \"int32\",\n        y: \"int32\",\n        health: \"uint32\",\n        name: \"string\",\n      },\n      key: [\"id\"],\n    },\n    Lore: {\n      schema: {\n        id: \"bytes32\",\n        alignment: \"string\",\n        backstory: \"string\",\n        currentQuest: \"string\",\n      },\n      key: [\"id\"],\n    },\n    Inventory: {\n      schema: {\n        ownerId: \"bytes32\",\n        items: [\n          {\n            itemId: \"bytes32\",\n            count: \"uint256\",\n          }\n        ],\n      },\n      key: [\"ownerId\"],\n    },\n    Item: {\n      schema: {\n        itemId: \"bytes32\",\n        name: \"string\",\n        description: \"string\",\n      },\n      key: [\"itemId\"],\n    },\n  },\n  deploy: {\n    upgradeableWorldImplementation: true,\n  },\n});\n```\n\n### Explanation of Changes\n\n1. **Inventory Table:**\n    - Changed `itemId` from `uint256[]` to an array of objects containing `itemId` (as a unique identifier) and `count`. This allows us to keep track of multiple instances of the same item type.\n\n2. **Item Table:**\n    - Changed the `itemId` to `bytes32` for uniqueness and used libraries such as `uuid` to generate unique IDs when items are created or added.\n    - Added a `description` field to provide more information about the item.\n\nThese improvements ensure that the tables are more robust and can handle complex relationships efficiently.","x":-1229,"y":-1767,"width":986,"height":1152,"color":"6"},
		{"id":"e7f287040c5e9c37","type":"text","text":"Review the libraries and refactor the Item and Inventory tables for robustness. ","x":-1531,"y":-2567,"width":351,"height":260,"color":"4"},
		{"id":"5369bec934e3c143","type":"text","text":"Create a system that manages the new tables","x":-960,"y":-2593,"width":449,"height":313,"color":"4"},
		{"id":"b7fcfee755c27694","type":"text","text":"Review system calls to handle the new systems","x":-243,"y":-2726,"width":393,"height":362,"color":"4"},
		{"id":"86a9e0d6da9b1fa8","type":"text","text":"Update the interface to handle the new calls","x":750,"y":-2155,"width":282,"height":272,"color":"4"}
	],
	"edges":[
		{"id":"66a04a380b889051","fromNode":"c69dd0793e94d2e2","fromSide":"bottom","toNode":"5369bec934e3c143","toSide":"top"},
		{"id":"7dbfc221fe034249","fromNode":"d903cfb737213afe","fromSide":"bottom","toNode":"5369bec934e3c143","toSide":"top"},
		{"id":"07145200f8139688","fromNode":"a483e59e901b60b9","fromSide":"left","toNode":"b7fcfee755c27694","toSide":"right"},
		{"id":"2878eac58a2a43b6","fromNode":"aad702861a9c001f","fromSide":"top","toNode":"86a9e0d6da9b1fa8","toSide":"bottom"},
		{"id":"1feccce58ef0c666","fromNode":"c0a014ef191a71b1","fromSide":"top","toNode":"86a9e0d6da9b1fa8","toSide":"bottom"},
		{"id":"e3956b7cf7702857","fromNode":"88c688ed2f6b3903","fromSide":"top","toNode":"86a9e0d6da9b1fa8","toSide":"bottom"},
		{"id":"a559893891958246","fromNode":"0a8e77f485f6faa2","fromSide":"top","toNode":"86a9e0d6da9b1fa8","toSide":"bottom"},
		{"id":"90cda9c86f956ae2","fromNode":"5369bec934e3c143","fromSide":"bottom","toNode":"7c37b3699de05511","toSide":"top"},
		{"id":"af1e3ffc1bae79ee","fromNode":"5369bec934e3c143","fromSide":"bottom","toNode":"b7fcfee755c27694","toSide":"top"},
		{"id":"21654089d8835cc9","fromNode":"b7fcfee755c27694","fromSide":"left","toNode":"4c7f2c09e6f79de1","toSide":"right"},
		{"id":"e3bc5899d6ee6dba","fromNode":"b7fcfee755c27694","fromSide":"bottom","toNode":"86a9e0d6da9b1fa8","toSide":"right"},
		{"id":"af70bedef9441a4e","fromNode":"86a9e0d6da9b1fa8","fromSide":"top","toNode":"c28a9e695dd98b79","toSide":"bottom"},
		{"id":"0722a55cf40b7f0e","fromNode":"2e92fe91a7bc60f7","fromSide":"top","toNode":"e7f287040c5e9c37","toSide":"bottom"},
		{"id":"35715e8997640bdb","fromNode":"b31e83727da6c445","fromSide":"top","toNode":"e7f287040c5e9c37","toSide":"bottom"},
		{"id":"8207f66c30842251","fromNode":"9ad82fc37002cbd3","fromSide":"top","toNode":"e7f287040c5e9c37","toSide":"bottom"},
		{"id":"67a7c6eef6e21fa4","fromNode":"b31e83727da6c445","fromSide":"top","toNode":"b7fcfee755c27694","toSide":"bottom"},
		{"id":"afa4da4ebeb8b1c6","fromNode":"e7f287040c5e9c37","fromSide":"right","toNode":"5369bec934e3c143","toSide":"left"},
		{"id":"605fbad3ae2396cf","fromNode":"e7f287040c5e9c37","fromSide":"top","toNode":"29d51ef5e557d3bc","toSide":"bottom"}
	]
}