{
	"nodes":[
		{"id":"6343f06af4ec924a","type":"group","x":-775,"y":-280,"width":1084,"height":1140,"label":"Using Smart Connections to search"},
		{"id":"b74952d80e6a6d39","type":"group","x":-684,"y":-1313,"width":901,"height":800,"label":"Rendering Smart Connection search"},
		{"id":"48769029686ff688","type":"text","text":"#### <u>User</u>:\nHere is a smart connections dynamic codeblock:\n\n| Similarity | Link |\n| --- | --- |\n| 0.32 | [[Haikufied summary.md#Haiku for the React Component]] |\n| 0.31 | [[Implementation/Emojimon/Client/mud/CreateSystemCalls.md#]] |\n| 0.31 | [[Implementation/Emojimon/Contracts/Utils.md#]] |\n| 0.29 | [[Haikufied summary.md#<u>User</u>:]] |\n| 0.29 | [[Cannoli College/2. Special arrows/5. Chat arrows.cno.canvas#]] |\n| 0.28 | [[Cannoli College/1. Basics/4. System messages.canvas#]] |\n| 0.28 | [[Haikufied summary.md#Haiku for the TypeScript Configuration]] |\n| 0.28 | [[Cannoli College/4. Vault interaction/1. Referencing notes.canvas#]] |\n| 0.28 | [[Implementation/Emojimon/Contracts/MapSystem.md#]] |\n| 0.27 | [[Cannoli College/1. Basics/1. Hello world.canvas#]] |\n| 0.27 | [[Haikufied summary.md#Haiku for the Solidity Contract]] |\n| 0.27 | [[Implementation/CodeReport.md#Function: `createSystemCalls`#Example Code]] |\n| 0.27 | [[Cannoli College/2. Special arrows/4. Choice arrows.canvas#]] |\n| 0.26 | [[Cannoli College/4. Vault interaction/7. Embedding Search (Smart Connections).canvas#]] |\n| 0.26 | [[Cannoli College/4. Vault interaction/3. Dynamic note references.canvas#]] |\n| 0.26 | [[Implementation/Component List.md#]] |\n| 0.26 | [[Implementation/Build/createSystemCalls.ts.md#]] |\n| 0.26 | [[Cannoli College/2. Special arrows/1. Config arrows.canvas#]] |\n| 0.25 | [[Implementation/Emojimon/Contracts/Mud_Config.md#]] |\n| 0.25 | [[Implementation/Clean/Latest Build.md#System Calls]] |\n| 0.25 | [[Cannoli College/1. Basics/2. Blank arrows.canvas#]] |\n| 0.24 | [[Cannoli College/4. Vault interaction/5. Referencing selections.canvas#]] |\n| 0.24 | [[Implementation/Emojimon/Contracts/Mud_Config.md#Next Steps:]] |\n| 0.24 | [[NES.canvas#]] |\n| 0.24 | [[Cannoli College/5. Groups/1. Basic groups.canvas#]] |\n| 0.24 | [[coordinationSystems/nerdWorkState/Projects/Tribe/MUD/README#Systems]] |\n| 0.24 | [[Implementation/Emojimon/Contracts/Encounter_System.md#Improved `EncounterSystem.sol`]] |\n| 0.24 | [[Docs/Batch calls.md#Batch calls#Batch calls from Solidity[](batch-calls-from-solidity)]] |\n| 0.23 | [[TradinSystem.md#Dynamic Quests System]] |\n| 0.23 | [[Implementation/Emojimon/Contracts/Encounter_System.md#]] |\n| 0.23 | [[Interface.canvas#]] |\n| 0.23 | [[coordinationSystems/nerdWorkState/Projects/Tribe/MUD/README#UI#Expanded Usage of Data]] |\n| 0.23 | [[Implementation/Build/systems/TradingSystem.sol.md#]] |\n| 0.23 | [[coordinationSystems/nerdWorkState/Projects/Tribe/MUD/README#UI#Simplify System Calls]] |\n| 0.23 | [[Implementation/Build/systems/InventorySystem.sol.md#]] |\n| 0.22 | [[Implementation/Emojimon/Contracts/LoreSystem.md#]] |\n| 0.22 | [[Docs/Tutorial/bestPractices.md#System Best Practices#Design consideraions[](design-consideraions)#Don't send ETH with your calls[](dont-send-eth-with-your-calls)]] |\n| 0.22 | [[Cannoli College/1. Basics/3. Branching.canvas#]] |\n| 0.22 | [[Implementation/Build/systems/SpawnPlayerSystem.sol.md#]] |\n| 0.22 | [[Implementation/Emojimon/Contracts/PostDeploy.s.sol.md#]] |\n| 0.22 | [[Implementation/Clean/Config.md#Example Interaction Script]] |\n| 0.22 | [[Implementation/CodeReport.md#Conclusion{1}]] |\n| 0.22 | [[TradinSystem.md#]] |\n| 0.22 | [[Implementation/Build/components/CharacterComponent.tsx.md#]] |\n| 0.22 | [[Cannoli College/Example notes/Meeting Notes.md#]] |\n| 0.22 | [[Implementation/Build/systems/DynamicQuestSystem.sol.md#]] |\n| 0.22 | [[Cannoli College/4. Vault interaction/4. Creating notes.canvas#]] |\n| 0.22 | [[Docs/Store Hook.md#IStoreHook[](istorehook)#Errors[](errors)]] |\n| 0.22 | [[Debugging.canvas#]] |\n| 0.22 | [[Implementation/Clean/Zustand.md#Step 3: Fetch Existing Players]] |\n| 0.22 | [[Docs/Batch calls.md#Batch calls#Batch calls from TypeScript[](batch-calls-from-typescript)]] |\n\nWhat's the most similar note probably about?\n#### <u>Assistant</u>:\nThe most similar note according to the provided smart connections dynamic codeblock is titled \"Haikufied summary.md#Haiku for the React Component,\" with a similarity score of 0.32. Given its title, it is likely about a creatively summarized version of a React component, potentially in the form of a haiku, which is a traditional Japanese three-line poem often characterized by its 5-7-5 syllable structure. This suggests that the note blends technical content with a poetic format to offer a succinct summary of a React component's functionality.\n#### Config\nmodel: gpt-4o\ntemperature: 1\nprovider: openai\n\n","x":-664,"y":-913,"width":385,"height":380,"color":"6"},
		{"id":"d244ad86313a5ef4","type":"text","text":"#### <u>User</u>:\nHere we've embedded the top 3 results of the similarity search:\n\n[[Haikufied summary.md#Haiku for the React Component]]\n### Haiku for the React Component\n\nPlayers on display,  \nPixel avatars in scrollâ€”  \nLores and lives unfold.\n#### Config\nmodel: gpt-4o\ntemperature: 1\nprovider: openai\n[[Implementation/Emojimon/Client/mud/CreateSystemCalls.md]]\n# CreateSystemCalls\n```ts\nimport { Direction } from \"../direction\";\nimport { MonsterCatchResult } from \"../monsterCatchResult\";\nimport { ClientComponents } from \"./createClientComponents\";\nimport { SetupNetworkResult } from \"./setupNetwork\";\nimport { Has, HasValue, getComponentValue, runQuery } from \"@latticexyz/recs\";\nimport { singletonEntity } from \"@latticexyz/store-sync/recs\";\nimport { uuid } from \"@latticexyz/utils\";\n\nexport type SystemCalls = ReturnType<typeof createSystemCalls>;\n\nexport function createSystemCalls(\n  { playerEntity, worldContract, waitForTransaction }: SetupNetworkResult,\n  { Encounter, MapConfig, MonsterCatchAttempt, Obstruction, Player, Position }: ClientComponents,\n) {\n  const wrapPosition = (x: number, y: number) => {\n    const mapConfig = getComponentValue(MapConfig, singletonEntity);\n    if (!mapConfig) {\n      throw new Error(\"mapConfig no yet loaded or initialized\");\n    }\n    return [(x + mapConfig.width) % mapConfig.width, (y + mapConfig.height) % mapConfig.height];\n  };\n\n  const isObstructed = (x: number, y: number) => {\n    return runQuery([Has(Obstruction), HasValue(Position, { x, y })]).size > 0;\n  };\n\n  const move = async (direction: Direction) => {\n    if (!playerEntity) {\n      throw new Error(\"no player\");\n    }\n\n    const position = getComponentValue(Position, playerEntity);\n    if (!position) {\n      console.warn(\"cannot move without a player position, not yet spawned?\");\n      return;\n    }\n\n    const inEncounter = !!getComponentValue(Encounter, playerEntity);\n    if (inEncounter) {\n      console.warn(\"cannot move while in encounter\");\n      return;\n    }\n\n    let { x: inputX, y: inputY } = position;\n    if (direction === Direction.North) {\n      inputY -= 1;\n    } else if (direction === Direction.East) {\n      inputX += 1;\n    } else if (direction === Direction.South) {\n      inputY += 1;\n    } else if (direction === Direction.West) {\n      inputX -= 1;\n    }\n\n    const [x, y] = wrapPosition(inputX, inputY);\n    if (isObstructed(x, y)) {\n      console.warn(\"cannot move to obstructed space\");\n      return;\n    }\n\n    const positionId = uuid();\n    Position.addOverride(positionId, {\n      entity: playerEntity,\n      value: { x, y },\n    });\n\n    try {\n      const tx = await worldContract.write.move([direction]);\n      await waitForTransaction(tx);\n    } catch (error) {\n      // Handle the error if the transaction fails\n      console.error(\"Move transaction failed:\", error);\n    } finally {\n      // Delay the override removal by a short duration (e.g., 1000ms)\n      setTimeout(() => {\n        Position.removeOverride(positionId);\n      }, 1000);\n    }\n  };\n\n  const spawn = async (inputX: number, inputY: number) => {\n    if (!playerEntity) {\n      throw new Error(\"no player\");\n    }\n\n    const canSpawn = getComponentValue(Player, playerEntity)?.value !== true;\n    if (!canSpawn) {\n      throw new Error(\"already spawned\");\n    }\n\n    const [x, y] = wrapPosition(inputX, inputY);\n    if (isObstructed(x, y)) {\n      console.warn(\"cannot spawn on obstructed space\");\n      return;\n    }\n\n    const positionId = uuid();\n    Position.addOverride(positionId, {\n      entity: playerEntity,\n      value: { x, y },\n    });\n    const playerId = uuid();\n    Player.addOverride(playerId, {\n      entity: playerEntity,\n      value: { value: true },\n    });\n\n    try {\n      const tx = await worldContract.write.spawn([x, y]);\n      await waitForTransaction(tx);\n    } catch (error) {\n      // Handle the error if the transaction fails\n      console.error(\"Spawn transaction failed:\", error);\n    } finally {\n      setTimeout(() => {\n        Position.removeOverride(positionId);\n        Player.removeOverride(playerId);\n      }, 1000);\n    }\n  };\n\n  const throwBall = async () => {\n    const player = playerEntity;\n    if (!player) {\n      throw new Error(\"no player\");\n    }\n\n    const encounter = getComponentValue(Encounter, player);\n    if (!encounter) {\n      throw new Error(\"no encounter\");\n    }\n    try {\n      const tx = await worldContract.write.throwBall();\n      await waitForTransaction(tx);\n    } catch (error) {\n      // Handle the error if the transaction fails\n      console.error(\"Spawn transaction failed:\", error);\n    }\n\n    const catchAttempt = getComponentValue(MonsterCatchAttempt, player);\n    if (!catchAttempt) {\n      throw new Error(\"no catch attempt found\");\n    }\n\n    return catchAttempt.result as MonsterCatchResult;\n  };\n\n  const fleeEncounter = async () => {\n    const tx = await worldContract.write.flee();\n    await waitForTransaction(tx);\n  };\n\n  return {\n    move,\n    spawn,\n    throwBall,\n    fleeEncounter,\n  };\n}\n\n```\n[[Implementation/Emojimon/Contracts/Utils.md]]\n# Utils\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity >=0.8.24;\n\nfunction addressToEntityKey(address addr) pure returns (bytes32) {\n  return bytes32(uint256(uint160(addr)));\n}\n```\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity >=0.8.24;\n\nfunction positionToEntityKey(int32 x, int32 y) pure returns (bytes32) {\n  return keccak256(abi.encode(x, y));\n}\n```\n\n\nSummarize the first note\n#### <u>Assistant</u>:\n### Haiku for the React Component\n\nThe first note creatively presents a haiku that encapsulates a summary of a React component. The haiku emphasizes the following points:\n\n- **Display of Players:** The component displays player avatars.\n- **Pixel Avatars in a Scrollable View:** These avatars are pixelated and can be scrolled through.\n- **Background Stories and Lives are Shown:** The component reveals the lores and lives associated with the avatars.\n\nThis haiku provides a poetic yet concise depiction of what the React component does, offering insight into its core functionalities in a unique, literary format.\n#### Config\nmodel: gpt-4o\ntemperature: 1\nprovider: openai\n\n","x":-201,"y":-913,"width":398,"height":380,"color":"6"},
		{"id":"46c4ce310ed88cf1","type":"text","text":"Here is a smart connections dynamic codeblock:\n\n```smart-connections\nAyy lmao\n```\nWhat's the most similar note probably about?","x":-641,"y":-1293,"width":339,"height":340,"color":"4"},
		{"id":"6ce747453d1d423f","type":"text","text":"Cannoli can leverage Smart Connections to do embedding search on your vault.\n\nSmart Connections is a popular plugin which, among many other features, can embed your whole vault using a variety of embeddings models. This lets you search for notes or blocks that are semantically similar to a given note or query.\n\nIf you have Smart Connections enabled on this vault, you can write a dynamic code block (triple backticks with \"smart-connections\" following the first set of backticks). Then you can show an LLM the resulting similarity ranking table or embed the most similar X notes.\n\n","x":-540,"y":-1700,"width":615,"height":320},
		{"id":"38595c66057d2f38","type":"text","text":"Here we've embedded the top 3 results of the similarity search:\n\n{{3\n```smart-connections\nAyy lmao\n```\n#@}}\n\nSummarize the first note","x":-171,"y":-1293,"width":339,"height":340,"color":"4"},
		{"id":"b4ec110ce33df376","type":"text","text":"To include the contents of the top results, wrap the whole code block in curly braces and newlines.\n\nYou can define the number of results to include using an integer after the first set of braces.\n\nYou can also include the modifiers as you would with note reference nodes. This time we included the new \"@\" link modifier to include the markdown link above the note. This will help make cannolis that can browse and search.","x":240,"y":-1266,"width":480,"height":287},
		{"id":"6e728caab4a543a8","type":"text","text":"how to make onchain games","x":-387,"y":-260,"width":462,"height":80,"color":"6"},
		{"id":"b4a0c102d3eeac17","type":"text","text":"Embedding search enables lots of cool stuff. You can make open queries about your vault or even have the LLM generate queries where needed, then zero in on the results and inject them as context wherever needed.","x":-572,"y":-440,"width":607,"height":103},
		{"id":"5db01d3546fde562","type":"text","text":"Which of the notes below fits the search query best?\n\nQuery: \"{{query}}\"\n\n{{4\n```smart-connections\n{{query}}\n```\n@}}","x":-726,"y":-90,"width":339,"height":280,"color":"4"},
		{"id":"5230a36585d39219","type":"text","text":"#### <u>User</u>:\nHere's a note that resulted from a search:\n\n{{@bestFit}}\n\nUse that note to answer this query: \"how to make onchain games\"\n#### <u>Assistant</u>:\nI apologize, but the note \"{{@bestFit}}\" doesn't provide any information or context to answer your query about making on-chain games.\n\nHowever, I can provide some general guidance on how to create on-chain games:\n\n### 1. **Understand On-Chain Gaming:**\nOn-chain gaming involves developing games that have blockchain technology at their core, where game assets, game logic, and sometimes even player interactions are handled on the blockchain. This can add transparency, security, and true ownership of in-game assets.\n\n### 2. **Choose a Blockchain Platform:**\nSelect a blockchain platform that supports smart contracts and has a vibrant developer community. Popular choices include:\n   - **Ethereum**: The most widely used platform for decentralized applications (dApps).\n   - **Binance Smart Chain (BSC)**: A faster and cheaper alternative to Ethereum.\n   - **Polygon (MATIC)**: Layer 2 scaling solution for Ethereum.\n   - **Solana**: Known for high throughput and low latency.\n\n### 3. **Learn Smart Contract Development:**\nSmart contracts are the backbone of on-chain games. You need to learn how to write and deploy them.\n   - For Ethereum and compatible chains, learn **Solidity**.\n   - For Solana, learn **Rust** or **Solana's framework (Anchor)**.\n\n### 4. **Develop Game Logic:**\nWrite smart contracts to handle game mechanics. This could include:\n   - Player registration and identity.\n   - In-game currency and asset management.\n   - Game rules and state transitions.\n   - Event handling (e.g., win/loss conditions).\n\n### 5. **Integrate with Frontend:**\nDevelop a frontend application that interacts with your smart contracts. You can use:\n   - **Web3.js** or **Ethers.js** for Ethereum.\n   - **Anchor** or **Solana Web3.js** for Solana.\n\n### 6. **Tokenize In-game Assets:**\nUse standards like ERC-20 (fungible tokens) and ERC-721/ERC-1155 (non-fungible tokens) to create in-game currencies and collectibles.\n   - Create or use existing token standards for your game assets.\n   - Ensure that these tokens can be stored, transferred, and traded on the blockchain.\n\n### 7. **Security and Testing:**\nThoroughly test your contracts and game logic to ensure security and correctness. Use tools such as:\n   - **Truffle** and **Hardhat** for Solidity development and testing.\n   - **Ganache** for local blockchain testing.\n   - Perform audits or use automated tools like **MythX** to identify vulnerabilities.\n\n### 8. **Deploy and Iterate:**\nDeploy your smart contracts to the mainnet or a testnet for further testing. Gather feedback and iterate on your design. Platforms for mainnet deployment include:\n   - **Etherscan** for Ethereum\n   - **BscScan** for Binance Smart Chain\n   - **Solana Explorer** for Solana\n\n### 9. **Community and Marketing:**\nEngage with the gaming and blockchain communities to promote your game and gather a player base. Platforms to consider:\n   - **Discord** servers dedicated to blockchain gaming.\n   - **Reddit** communities like r/crypto_gaming.\n   - Twitter and other social media.\n\n### 10. **Keep Up with Updates:**\nBlockchain technology is rapidly evolving. Stay updated with the latest improvements and developments in the blockchain ecosystem to enhance your game.\n\nBy following these steps, you can embark on the journey to create an on-chain game.\n#### Config\nmodel: gpt-4o\ntemperature: 1\nprovider: openai\n\n","x":-112,"y":-137,"width":385,"height":615,"color":"6"},
		{"id":"44636ef212354a8b","type":"text","text":"Here's a note that resulted from a search:\n\n{{@bestFit}}\n\nUse that note to answer this query: \"{{query}}\"","x":-510,"y":280,"width":241,"height":198,"color":"4"},
		{"id":"79b80456d62de306","type":"text","text":"I apologize, but the note \"{{@bestFit}}\" doesn't provide any information or context to answer your query about making on-chain games.\n\nHowever, I can provide some general guidance on how to create on-chain games:\n\n### 1. **Understand On-Chain Gaming:**\nOn-chain gaming involves developing games that have blockchain technology at their core, where game assets, game logic, and sometimes even player interactions are handled on the blockchain. This can add transparency, security, and true ownership of in-game assets.\n\n### 2. **Choose a Blockchain Platform:**\nSelect a blockchain platform that supports smart contracts and has a vibrant developer community. Popular choices include:\n   - **Ethereum**: The most widely used platform for decentralized applications (dApps).\n   - **Binance Smart Chain (BSC)**: A faster and cheaper alternative to Ethereum.\n   - **Polygon (MATIC)**: Layer 2 scaling solution for Ethereum.\n   - **Solana**: Known for high throughput and low latency.\n\n### 3. **Learn Smart Contract Development:**\nSmart contracts are the backbone of on-chain games. You need to learn how to write and deploy them.\n   - For Ethereum and compatible chains, learn **Solidity**.\n   - For Solana, learn **Rust** or **Solana's framework (Anchor)**.\n\n### 4. **Develop Game Logic:**\nWrite smart contracts to handle game mechanics. This could include:\n   - Player registration and identity.\n   - In-game currency and asset management.\n   - Game rules and state transitions.\n   - Event handling (e.g., win/loss conditions).\n\n### 5. **Integrate with Frontend:**\nDevelop a frontend application that interacts with your smart contracts. You can use:\n   - **Web3.js** or **Ethers.js** for Ethereum.\n   - **Anchor** or **Solana Web3.js** for Solana.\n\n### 6. **Tokenize In-game Assets:**\nUse standards like ERC-20 (fungible tokens) and ERC-721/ERC-1155 (non-fungible tokens) to create in-game currencies and collectibles.\n   - Create or use existing token standards for your game assets.\n   - Ensure that these tokens can be stored, transferred, and traded on the blockchain.\n\n### 7. **Security and Testing:**\nThoroughly test your contracts and game logic to ensure security and correctness. Use tools such as:\n   - **Truffle** and **Hardhat** for Solidity development and testing.\n   - **Ganache** for local blockchain testing.\n   - Perform audits or use automated tools like **MythX** to identify vulnerabilities.\n\n### 8. **Deploy and Iterate:**\nDeploy your smart contracts to the mainnet or a testnet for further testing. Gather feedback and iterate on your design. Platforms for mainnet deployment include:\n   - **Etherscan** for Ethereum\n   - **BscScan** for Binance Smart Chain\n   - **Solana Explorer** for Solana\n\n### 9. **Community and Marketing:**\nEngage with the gaming and blockchain communities to promote your game and gather a player base. Platforms to consider:\n   - **Discord** servers dedicated to blockchain gaming.\n   - **Reddit** communities like r/crypto_gaming.\n   - Twitter and other social media.\n\n### 10. **Keep Up with Updates:**\nBlockchain technology is rapidly evolving. Stay updated with the latest improvements and developments in the blockchain ecosystem to enhance your game.\n\nBy following these steps, you can embark on the journey to create an on-chain game.","x":-678,"y":520,"width":577,"height":300,"color":"6"},
		{"id":"9f3d2a5adb087657","type":"text","text":"In this cannoli we perform an embedding search on a query, have the LLM select the most relevant note from the top 4, and use that as context to answer the initial query.","x":-1180,"y":17,"width":383,"height":154},
		{"id":"4c61a0ec28b34874","x":-219,"y":304,"width":500,"height":150,"color":"1","text":"<u>Warning:</u>\nNote \"[[Docs/What is MUD.md#What is MUD?]]\" not found","type":"text"}
	],
	"edges":[
		{"id":"9c97bc5b033f7912","fromNode":"46c4ce310ed88cf1","fromSide":"bottom","toNode":"48769029686ff688","toSide":"top","color":"2"},
		{"id":"8488abe3896113e6","fromNode":"5db01d3546fde562","fromSide":"bottom","toNode":"44636ef212354a8b","toSide":"top","label":"[bestFit"},
		{"id":"e0bd7da21aff0c3d","fromNode":"44636ef212354a8b","fromSide":"right","toNode":"5230a36585d39219","toSide":"left","color":"2"},
		{"id":"782881c8520b4911","fromNode":"44636ef212354a8b","fromSide":"bottom","toNode":"79b80456d62de306","toSide":"top"},
		{"id":"8780fbd775315770","fromNode":"38595c66057d2f38","fromSide":"bottom","toNode":"d244ad86313a5ef4","toSide":"top","color":"2"},
		{"id":"2df29e8ef4d81f5d","fromNode":"6e728caab4a543a8","fromSide":"bottom","toNode":"5db01d3546fde562","toSide":"top","label":"query"},
		{"id":"73a455ab933fce60","fromNode":"6e728caab4a543a8","fromSide":"bottom","toNode":"44636ef212354a8b","toSide":"top","label":"query"},
		{"id":"3637ea3ecd234036","fromNode":"44636ef212354a8b","fromSide":"right","toNode":"4c61a0ec28b34874","toSide":"left","fromEnd":"none","toEnd":"none","color":"1"}
	]
}